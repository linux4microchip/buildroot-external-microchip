diff -ruN A/arch/riscv/dts/mpfs-som1-soc.dts B/arch/riscv/dts/mpfs-som1-soc.dts
--- A/arch/riscv/dts/mpfs-som1-soc.dts	1969-12-31 16:00:00.000000000 -0800
+++ B/arch/riscv/dts/mpfs-som1-soc.dts	2023-11-29 07:47:48.010869002 -0800
@@ -0,0 +1,214 @@
+/dts-v1/;
+
+#include "microchip-mpfs.dtsi"
+
+/* Clock frequency (in Hz) of the rtcclk */
+#define RTCCLK_FREQ		1000000
+
+/ {
+	model = "SundanceDSP Polarberry";
+	compatible = "sundance,polarberry", "microchip,mpfs";
+
+	aliases {
+		serial0 = &uart0;
+		ethernet0 = &mac1;
+		spi0 = &spi0;
+	};
+
+	chosen {
+		stdout-path = "serial0";
+	};
+
+	cpus {
+		timebase-frequency = <RTCCLK_FREQ>;
+	};
+
+	kernel: memory@80000000 {
+		device_type = "memory";
+		reg = <0x0 0x80000000 0x0 0x4000000>;
+		label = "kernel";
+	};
+
+	ddr_cached_low: memory@8a000000 {
+		device_type = "memory";
+		reg = <0x0 0x8a000000 0x0 0x8000000>;
+		label = "cached-low";
+	};
+
+	ddr_non_cached_low: memory@c4000000 {
+		device_type = "memory";
+		reg = <0x0 0xc4000000 0x0 0x6000000>;
+		label = "non-cached-low";
+	};
+
+	ddr_cached_high: memory@1022000000 {
+		device_type = "memory";
+		reg = <0x10 0x22000000 0x0 0x5e000000>;
+		label = "cached-high";
+	};
+
+	ddr_non_cached_high: memory@1412000000 {
+		device_type = "memory";
+		reg = <0x14 0x12000000 0x0 0x10000000>;
+		label = "non-cached-high";
+	};
+
+	reserved-memory {
+		#address-cells = <2>;
+		#size-cells = <2>;
+		ranges;
+
+		hss: hss-buffer {
+			compatible = "shared-dma-pool";
+			reg = <0x10 0x3fc00000 0x0 0x400000>;
+			no-map;
+		};
+
+		dma_non_cached_low: non-cached-low-buffer {
+			compatible = "shared-dma-pool";
+			size = <0x0 0x4000000>;
+			no-map;
+			linux,dma-default;
+			alloc-ranges = <0x0 0xc4000000 0x0 0x4000000>;
+			dma-ranges = <0x0 0xc4000000 0x0 0xc4000000 0x0 0x4000000>;
+		};
+
+		dma_non_cached_high: non-cached-high-buffer {
+			compatible = "shared-dma-pool";
+			size = <0x0 0x10000000>;
+			no-map;
+			linux,dma-default;
+			alloc-ranges = <0x14 0x12000000 0x0 0x10000000>;
+			dma-ranges = <0x14 0x12000000 0x14 0x12000000 0x0 0x10000000>;
+		};
+
+		fabricbuf0ddrc: buffer@88000000 {
+			compatible = "shared-dma-pool";
+			reg = <0x0 0x88000000 0x0 0x2000000>;
+			no-map;
+		};
+
+		fabricbuf1ddrnc: buffer@c8000000 {
+			compatible = "shared-dma-pool";
+			reg = <0x0 0xc8000000 0x0 0x2000000>;
+			no-map;
+		};
+
+		fabricbuf2ddrncwcb: buffer@d8000000 {
+			compatible = "shared-dma-pool";
+			reg = <0x0 0xd8000000 0x0 0x2000000>;
+			no-map;
+		};
+	};
+
+	udmabuf0 {
+		compatible = "ikwzm,u-dma-buf";
+		device-name = "udmabuf-ddr-c0";
+		minor-number = <0>;
+		size = <0x0 0x2000000>;
+		memory-region = <&fabricbuf0ddrc>;
+		sync-mode = <3>;
+	};
+
+	udmabuf1 {
+		compatible = "ikwzm,u-dma-buf";
+		device-name = "udmabuf-ddr-nc0";
+		minor-number = <1>;
+		size = <0x0 0x2000000>;
+		memory-region = <&fabricbuf1ddrnc>;
+		sync-mode = <3>;
+	};
+
+	udmabuf2 {
+		compatible = "ikwzm,u-dma-buf";
+		device-name = "udmabuf-ddr-nc-wcb0";
+		minor-number = <2>;
+		size = <0x0 0x2000000>;
+		memory-region = <&fabricbuf2ddrncwcb>;
+		sync-mode = <3>;
+	};
+};
+
+&refclk {
+	clock-frequency = <125000000>;
+};
+
+&uart0 {
+	status = "okay";
+};
+
+&uart1 {
+	status = "okay";
+};
+
+&mmc {
+	status = "okay";
+
+	max-frequency = <200000000>;
+	bus-width = <4>;
+	cap-mmc-highspeed;
+	cap-sd-highspeed;
+	no-1-8-v;
+	disable-wp;
+};
+
+&i2c0 {
+	status = "okay";
+	clock-frequency = <100000>;
+};
+
+&i2c1 {
+	status = "okay";
+	clock-frequency = <100000>;
+};
+
+&mac1 {
+	status = "okay";
+
+	phy-mode = "sgmii";
+	phy-handle = <&phy5>;
+
+	phy4: ethernet-phy@4 {
+		reg = <4>;
+		ti,fifo-depth = <0x01>;
+	};
+
+	phy5: ethernet-phy@5 {
+		reg = <5>;
+		ti,fifo-depth = <0x01>;
+	};
+};
+
+&usb {
+	status = "okay";
+	dr_mode = "host";
+};
+
+&spi0 {
+	compatible = "microchip,mpfs-qspi";
+	status = "okay";
+	num-cs = <1>;
+
+	flash@0 {
+		#address-cells = <1>;
+		#size-cells = <1>;
+
+		compatible = "n25q00a";
+		reg = <0x0>;
+
+		spi-max-frequency = <10000000>;
+
+		spi-tx-bus-width = <1>;
+		spi-rx-bus-width = <1>;
+
+		partition@0 {
+			label = "bootloadr";
+			reg = <0x0 0x2000000>; //32Mb
+		};
+
+		partition@2000000 {
+			label = "qspi-linux";
+			reg = <0x2000000 0x6000000>; //96Mb
+		};
+	};
+};
diff -ruN A/arch/riscv/Kconfig B/arch/riscv/Kconfig
--- A/arch/riscv/Kconfig	2023-10-31 02:41:28.000000000 -0700
+++ B/arch/riscv/Kconfig	2023-11-29 07:46:53.258808056 -0800
@@ -23,6 +23,9 @@
 config TARGET_SUNDANCEDSP_POLARBERRY
 	bool "Support SundanceDSP Polarberry Board (based on Microchip MPFS)"
 
+config TARGET_SUNDANCEDSP_SOM1-SOC
+	bool "Support SundanceDSP SOM1-SOC Board (based on Microchip MPFS)"
+
 config TARGET_ALDEC_TYSOM_M_MPFS250T
 	bool "Support Aldec TySoM M MPFS250T Board"
 
@@ -80,6 +83,7 @@
 source "board/microchip/mpfs_icicle/Kconfig"
 source "board/microchip/mpfs_videokit/Kconfig"
 source "board/sundancedsp/polarberry/Kconfig"
+source "board/sundancedsp/som1-soc/Kconfig"
 source "board/sifive/unleashed/Kconfig"
 source "board/sifive/unmatched/Kconfig"
 source "board/openpiton/riscv64/Kconfig"
diff -ruN A/board/sundancedsp/som1-soc/Kconfig B/board/sundancedsp/som1-soc/Kconfig
--- A/board/sundancedsp/som1-soc/Kconfig	1969-12-31 16:00:00.000000000 -0800
+++ B/board/sundancedsp/som1-soc/Kconfig	2023-11-29 07:44:31.294668345 -0800
@@ -0,0 +1,44 @@
+if TARGET_SUNDANCEDSP_SOM1-SOC
+
+config SYS_BOARD
+	default "som1-soc"
+
+config SYS_VENDOR
+	default "sundancedsp"
+
+config SYS_CPU
+	default "mpfs"
+
+config SYS_CONFIG_NAME
+	default "sundancedsp_som1-soc"
+
+config TEXT_BASE
+	default 0x80000000 if !RISCV_SMODE
+	default 0x80200000 if RISCV_SMODE
+
+config BOARD_SPECIFIC_OPTIONS # dummy
+	def_bool y
+	select MICROCHIP_MPFS
+	select BOARD_EARLY_INIT_F
+	select BOARD_LATE_INIT
+	imply SMP
+	imply CMD_DHCP
+	imply CMD_EXT2
+	imply CMD_EXT4
+	imply CMD_FAT
+	imply CMD_FS_GENERIC
+	imply CMD_NET
+	imply CMD_PING
+	imply CMD_MMC
+	imply DOS_PARTITION
+	imply EFI_PARTITION
+	imply IP_DYN
+	imply ISO_PARTITION
+	imply PHY_LIB
+	imply PHY_VITESSE
+	imply MTD_SPI_NAND
+	imply CMD_MTD
+	imply MTD_PARTITIONS
+	imply CMD_MTDPARTS
+	imply MPFS_PRIORITISE_QSPI_BOOT
+endif
diff -ruN A/board/sundancedsp/som1-soc/Makefile B/board/sundancedsp/som1-soc/Makefile
--- A/board/sundancedsp/som1-soc/Makefile	1969-12-31 16:00:00.000000000 -0800
+++ B/board/sundancedsp/som1-soc/Makefile	2023-11-29 07:44:45.034680571 -0800
@@ -0,0 +1 @@
+obj-y	+= som1-soc.o
diff -ruN A/board/sundancedsp/som1-soc/som1-soc.c B/board/sundancedsp/som1-soc/som1-soc.c
--- A/board/sundancedsp/som1-soc/som1-soc.c	1969-12-31 16:00:00.000000000 -0800
+++ B/board/sundancedsp/som1-soc/som1-soc.c	2023-10-31 02:41:28.000000000 -0700
@@ -0,0 +1,380 @@
+#include <common.h>
+#include <dm.h>
+#include <env.h>
+#include <init.h>
+#include <malloc.h>
+#include <asm/global_data.h>
+#include <asm/io.h>
+
+DECLARE_GLOBAL_DATA_PTR;
+
+#define MPFS_SYSREG_SOFT_RESET		((unsigned int *)0x20002088)
+#define MPFS_SYS_SERVICE_CR		((unsigned int *)0x37020050)
+#define MPFS_SYS_SERVICE_SR		((unsigned int *)0x37020054)
+#define MPFS_SYS_SERVICE_MAILBOX_U8	((unsigned char *)0x37020800)
+#define MPFS_SYS_SERVICE_MAILBOX_U32	((unsigned int *)0x37020800)
+
+#define SERVICE_CR_REQ_MASK		0x1u
+#define SERVICE_SR_BUSY_MASK		0x2u
+#define SERVICE_SR_STATUS_SHIFT		16
+#define SERVICE_CR_COMMAND_SHIFT	16
+
+#define SYS_SPI_CMD			0x50
+#define SYS_SPI_MAILBOX_DATA_LEN	17
+#define SYS_SPI_MAILBOX_SRC_OFFSET	8
+#define SYS_SPI_MAILBOX_LENGTH_OFFSET	12
+#define SYS_SPI_MAILBOX_FREQ_OFFSET	16
+#define SYS_SPI_MAILBOX_FREQ		3
+#define SPI_FLASH_ADDR			0x400
+
+#define PERIPH_RESET_VALUE		0x800001e8u
+
+/* Descriptor table */
+#define START_OFFSET			4
+#define END_OFFSET			8
+#define SIZE_OFFSET			12
+#define DESC_NEXT			12
+#define DESC_RESERVED_SIZE		0
+#define DESC_SIZE			16
+
+#define BYTES_2				2
+#define BYTES_4				4
+#define BYTES_8				8
+#define BYTES_16			16
+#define BYTES_24			24
+#define MASK_8BIT			0xff
+
+#define DESIGN_MAGIC_0			0x4d /* 'M' */
+#define DESIGN_MAGIC_1			0x43 /* 'C'*/
+#define DESIGN_MAGIC_2			0x48 /* 'H'*/
+#define DESIGN_MAGIC_3			0x50 /* 'P'*/
+
+static u8 no_of_dtbo;
+static u32 dtbos_size;
+
+static void read_device_serial_number(u8 *response, u8 response_size)
+{
+	u8 idx;
+	u8 *response_buf;
+	unsigned int val;
+
+	response_buf = (u8 *)response;
+
+	writel(SERVICE_CR_REQ_MASK, MPFS_SYS_SERVICE_CR);
+	/*
+	 * REQ bit will remain set till the system controller starts
+	 * processing.
+	 */
+	do {
+		val = readl(MPFS_SYS_SERVICE_CR);
+	} while (SERVICE_CR_REQ_MASK == (val & SERVICE_CR_REQ_MASK));
+
+	/*
+	 * Once system controller starts processing the busy bit will
+	 * go high and service is completed when busy bit is gone low
+	 */
+	do {
+		val = readl(MPFS_SYS_SERVICE_SR);
+	} while (SERVICE_SR_BUSY_MASK == (val & SERVICE_SR_BUSY_MASK));
+
+	for (idx = 0; idx < response_size; idx++)
+		response_buf[idx] = readb(MPFS_SYS_SERVICE_MAILBOX_U8 + idx);
+}
+
+static u16 execute_sys_service(u8 cmd_opcode, u8 *cmd_data, u16 cmd_data_size)
+{
+	u32 *word_buf;
+	u32 mailbox_val;
+	u32 idx, value;
+	u16 status;
+	u8 *byte_buf;
+	u8 byte_offset;
+	u8 byte_idx;
+
+	word_buf = (u32 *)cmd_data;
+
+	for (idx = 0; idx < cmd_data_size / BYTES_4; idx++)
+		writel(word_buf[idx], MPFS_SYS_SERVICE_MAILBOX_U32 + idx);
+
+	if (cmd_data_size % BYTES_4 > 0) {
+		byte_offset = (cmd_data_size / BYTES_4) * BYTES_4;
+		byte_buf = (u8 *)(cmd_data + byte_offset);
+
+		mailbox_val = readl(MPFS_SYS_SERVICE_MAILBOX_U32 + idx);
+
+		for (byte_idx = 0; byte_idx < cmd_data_size % 4; byte_idx++) {
+			mailbox_val &= ~(MASK_8BIT << (byte_idx * BYTES_8));
+			value = byte_buf[byte_idx] << (byte_idx * BYTES_8);
+			mailbox_val |= value;
+		}
+		writel(mailbox_val, MPFS_SYS_SERVICE_MAILBOX_U32 + idx);
+	}
+
+	writel((cmd_opcode << SERVICE_CR_COMMAND_SHIFT) | SERVICE_CR_REQ_MASK,
+	       MPFS_SYS_SERVICE_CR);
+
+	/*
+	 * REQ bit will remain set till the system controller starts
+	 * processing.
+	 */
+	do {
+		value = readl(MPFS_SYS_SERVICE_CR);
+	} while (SERVICE_CR_REQ_MASK == (value & SERVICE_CR_REQ_MASK));
+
+	/*
+	 * Once system controller starts processing the busy bit will
+	 * go high and service is completed when busy bit is gone low
+	 */
+	do {
+		value = readl(MPFS_SYS_SERVICE_SR);
+	} while (SERVICE_SR_BUSY_MASK == (value & SERVICE_SR_BUSY_MASK));
+
+	status = value >> SERVICE_SR_STATUS_SHIFT;
+
+	return status;
+}
+
+static u16 sys_service_spi_copy(void *dst_addr, u32 src_addr, u32 length)
+{
+	u16 status;
+	u8 mailbox_format[SYS_SPI_MAILBOX_DATA_LEN];
+
+	*(u64 *)mailbox_format = (u64)dst_addr;
+	*(u32 *)(mailbox_format + SYS_SPI_MAILBOX_SRC_OFFSET) = src_addr;
+	*(u32 *)(mailbox_format + SYS_SPI_MAILBOX_LENGTH_OFFSET) = length;
+	mailbox_format[SYS_SPI_MAILBOX_FREQ_OFFSET] = SYS_SPI_MAILBOX_FREQ;
+
+	status = execute_sys_service(SYS_SPI_CMD, mailbox_format,
+				     SYS_SPI_MAILBOX_DATA_LEN);
+	return status;
+}
+
+static u16 get_dtbo_desc_header(u8 *desc_data, u32 desc_addr)
+{
+	u32 length, no_of_descs;
+	u16 status;
+
+	/* Get first four bytes to calculate length */
+	status = sys_service_spi_copy(desc_data, desc_addr, BYTES_4);
+	if (!status) {
+		/* Number of descriptors in dtbo descriptor */
+		no_of_descs = *((u32 *)desc_data);
+		if (no_of_descs) {
+			length = DESC_SIZE + ((no_of_descs - 1) * DESC_SIZE);
+			status = sys_service_spi_copy(desc_data, desc_addr,
+						      length);
+		} else {
+			status = -1;
+		}
+	}
+
+	return status;
+}
+
+static u8 *get_dtbo(u32 start_addr, u32 size)
+{
+	u16 status;
+	u8 *dtbo;
+
+	dtbo = (u8 *)malloc(size);
+	/* Get a dtbo from the spi flash */
+	status = sys_service_spi_copy(dtbo, start_addr + SPI_FLASH_ADDR,
+				      size);
+	if (status) {
+		free(dtbo);
+		dtbo = NULL;
+	}
+
+	return dtbo;
+}
+
+static void parse_desc_header(u8 *desc_header)
+{
+	u32 dtbo_desc_start_addr;
+	u32 dtbo_desc_end_addr;
+	u32 dtbo_desc_size;
+	u32 no_of_descs;
+	u16 idx, rsvd = 0;
+	u8 dtbo_name[16];
+	u8 dtbo_addr[20];
+	u8 *desc;
+	u8 *dtbo;
+
+	no_of_descs = *((u32 *)desc_header);
+
+	for (idx = 0; idx < no_of_descs; idx++) {
+		desc = &desc_header[START_OFFSET + (DESC_NEXT * idx) + rsvd];
+		dtbo_desc_start_addr = *((u32 *)desc);
+
+		desc = &desc_header[END_OFFSET + (DESC_NEXT * idx) + rsvd];
+		dtbo_desc_end_addr = *((u32 *)desc);
+
+		desc = &desc_header[SIZE_OFFSET + (DESC_NEXT * idx) + rsvd];
+		dtbo_desc_size = *((u32 *)desc);
+
+		if (no_of_descs)
+			rsvd += DESC_RESERVED_SIZE;
+
+		dtbo = get_dtbo(dtbo_desc_start_addr, dtbo_desc_size);
+		if (dtbo) {
+			sprintf(dtbo_name, "dtbo_image%d", no_of_dtbo);
+			sprintf(dtbo_addr, "0x%llx", (u64)dtbo);
+			env_set(dtbo_name, dtbo_addr);
+			++no_of_dtbo;
+			dtbos_size += dtbo_desc_size;
+		}
+	}
+}
+
+static void get_device_tree_overlays(void)
+{
+	u32 desc_length;
+	u32 dtbo_desc_addr;
+	u32 dtbo_addr[5];
+	u16 i, status, hart, no_of_harts;
+	u8 design_info_desc[256];
+	u8 dtbo_desc_data[256];
+	u8 no_of_dtbos[8];
+	u8 dtbo_size[8];
+	u8 *desc;
+
+	no_of_dtbo = 0;
+	dtbos_size = 0;
+
+	/* Read first 10 bytes to verify the descriptor is found or not */
+	status = sys_service_spi_copy(design_info_desc, SPI_FLASH_ADDR, 10);
+
+	if (!status && design_info_desc[0] == DESIGN_MAGIC_0 &&
+	    design_info_desc[1] == DESIGN_MAGIC_1 &&
+	    design_info_desc[2] == DESIGN_MAGIC_2 &&
+	    design_info_desc[3] == DESIGN_MAGIC_3) {
+		desc_length = *((u32 *)&design_info_desc[4]);
+		/* Read Design descriptor */
+		status = sys_service_spi_copy(design_info_desc,
+					      SPI_FLASH_ADDR, desc_length);
+		if (!status) {
+			no_of_harts = *((u16 *)&design_info_desc[10]);
+
+			for (hart = 0; hart < no_of_harts; hart++) {
+				/* Start address of DTBO descriptor */
+				desc = &design_info_desc[(0x4 * hart) + 0xc];
+
+				dtbo_desc_addr = *((u32 *)desc);
+				dtbo_addr[hart] = dtbo_desc_addr;
+
+				if (!dtbo_addr[hart])
+					continue;
+
+				for (i = 0; i < hart; i++) {
+					if (dtbo_addr[hart] == dtbo_addr[i])
+						continue;
+				}
+
+				if (hart && hart == i)
+					continue;
+
+				dtbo_desc_addr += SPI_FLASH_ADDR;
+				status = get_dtbo_desc_header(dtbo_desc_data,
+							      dtbo_desc_addr);
+				if (status)
+					continue;
+				else
+					parse_desc_header(dtbo_desc_data);
+			}
+		}
+	}
+	sprintf(no_of_dtbos, "%d", no_of_dtbo);
+	env_set("no_of_overlays", no_of_dtbos);
+	sprintf(dtbo_size, "%d", dtbos_size);
+	env_set("dtbo_size", dtbo_size);
+}
+
+int board_init(void)
+{
+	/* For now nothing to do here. */
+
+	return 0;
+}
+
+int board_early_init_f(void)
+{
+	unsigned int val;
+
+	/* Reset uart, mmc peripheral */
+	val = readl(MPFS_SYSREG_SOFT_RESET);
+	val = (val & ~(PERIPH_RESET_VALUE));
+	writel(val, MPFS_SYSREG_SOFT_RESET);
+
+	return 0;
+}
+
+int board_late_init(void)
+{
+	u32 ret;
+	u32 node;
+	u8 idx;
+	u8 device_serial_number[16] = { 0 };
+	unsigned char mac_addr[6];
+	char icicle_mac_addr[20];
+	void *blob = (void *)gd->fdt_blob;
+
+	node = fdt_path_offset(blob, "ethernet0");
+	if (node < 0) {
+		printf("No ethernet0 path offset\n");
+		return -ENODEV;
+	}
+
+	ret = fdtdec_get_byte_array(blob, node, "local-mac-address", mac_addr, 6);
+	if (ret) {
+		printf("No local-mac-address property\n");
+		return -EINVAL;
+	}
+
+	read_device_serial_number(device_serial_number, 16);
+
+	/* Update MAC address with device serial number */
+	mac_addr[0] = 0x00;
+	mac_addr[1] = 0x04;
+	mac_addr[2] = 0xA3;
+	mac_addr[3] = device_serial_number[2];
+	mac_addr[4] = device_serial_number[1];
+	mac_addr[5] = device_serial_number[0];
+
+	ret = fdt_setprop(blob, node, "local-mac-address", mac_addr, 6);
+	if (ret) {
+		printf("Error setting local-mac-address property\n");
+		return -ENODEV;
+	}
+
+	icicle_mac_addr[0] = '[';
+
+	sprintf(&icicle_mac_addr[1], "%pM", mac_addr);
+
+	icicle_mac_addr[18] = ']';
+	icicle_mac_addr[19] = '\0';
+
+	for (idx = 0; idx < 20; idx++) {
+		if (icicle_mac_addr[idx] == ':')
+			icicle_mac_addr[idx] = ' ';
+	}
+	env_set("icicle_mac_addr0", icicle_mac_addr);
+
+	mac_addr[5] = device_serial_number[0] + 1;
+
+	icicle_mac_addr[0] = '[';
+
+	sprintf(&icicle_mac_addr[1], "%pM", mac_addr);
+
+	icicle_mac_addr[18] = ']';
+	icicle_mac_addr[19] = '\0';
+
+	for (idx = 0; idx < 20; idx++) {
+		if (icicle_mac_addr[idx] == ':')
+			icicle_mac_addr[idx] = ' ';
+	}
+	env_set("icicle_mac_addr1", icicle_mac_addr);
+
+	get_device_tree_overlays();
+
+	return 0;
+}
diff -ruN A/board/sundancedsp/som1-soc/uboot.env B/board/sundancedsp/som1-soc/uboot.env
--- A/board/sundancedsp/som1-soc/uboot.env	1969-12-31 16:00:00.000000000 -0800
+++ B/board/sundancedsp/som1-soc/uboot.env	2023-11-29 07:45:27.406720143 -0800
@@ -0,0 +1,19 @@
+arch=riscv
+cpu=riscv
+board=som1-soc
+board_name=som1-soc
+vendor=sundancedsp
+baudrate=115200
+soc=polarfire
+autoload=1
+bootdelay=5
+reset=1
+ipaddr=192.168.1.72
+netmask=255.255.255.0
+serverip=192.168.1.177
+fileaddr=0x90000000
+bootcmd=run mmcboot
+bootfile=fitimage_som1-soc.itb
+netboot=tftpboot $fileaddr; bootm $fileaddr
+flash_linux=tftp $fileaddr; mmc erase 0x800 0x10000; mmc write $fileaddr 0x800 0x10000
+mmcboot=mmc read $fileaddr 0x800 0x10000 && bootm $fileaddr
diff -ruN A/configs/sundancedsp_som1-soc_defconfig B/configs/sundancedsp_som1-soc_defconfig
--- A/configs/sundancedsp_som1-soc_defconfig	1969-12-31 16:00:00.000000000 -0800
+++ B/configs/sundancedsp_som1-soc_defconfig	2023-11-29 07:49:32.950994829 -0800
@@ -0,0 +1,37 @@
+CONFIG_RISCV=y
+CONFIG_SYS_MALLOC_LEN=0x800000
+CONFIG_SYS_MALLOC_F_LEN=0x2000
+CONFIG_HAS_CUSTOM_SYS_INIT_SP_ADDR=y
+CONFIG_CUSTOM_SYS_INIT_SP_ADDR=0x80200000
+CONFIG_ENV_SIZE=0x2000
+CONFIG_DEFAULT_DEVICE_TREE="mpfs-som1-soc"
+CONFIG_TARGET_SUNDANCEDSP_SOM1-SOC=y
+CONFIG_ARCH_RV64I=y
+CONFIG_RISCV_SMODE=y
+CONFIG_DISTRO_DEFAULTS=y
+CONFIG_SYS_LOAD_ADDR=0x80200000
+CONFIG_FIT=y
+CONFIG_QSPI_BOOT=y
+CONFIG_SD_BOOT=y
+CONFIG_SPI_BOOT=y
+CONFIG_DISPLAY_CPUINFO=y
+CONFIG_DISPLAY_BOARDINFO=y
+CONFIG_SYS_CBSIZE=256
+CONFIG_SYS_PBSIZE=282
+CONFIG_SYS_BOOTM_LEN=0x4000000
+CONFIG_SYS_RELOC_GD_ENV_ADDR=y
+CONFIG_SYSRESET=y
+CONFIG_SYS_PROMPT="SOM1-SOC: U-boot> "
+# CONFIG_CMD_MTDPARTS is not set
+CONFIG_CMD_UBI=y
+CONFIG_SYS_RELOC_GD_ENV_ADDR=y
+CONFIG_USE_DEFAULT_ENV_FILE=y
+CONFIG_DEFAULT_ENV_FILE="board/sundancedsp/som1-soc/uboot.env"
+CONFIG_DDR_SPD=y
+CONFIG_DM_MTD=y
+CONFIG_SPI_FLASH_SPANSION=y
+CONFIG_SPI_FLASH_STMICRO=y
+CONFIG_SPI_FLASH_SST=y
+CONFIG_SPI_FLASH_MTD=y
+CONFIG_USB=y
+CONFIG_OF_LIBFDT_OVERLAY=y
diff -ruN A/include/configs/sundancedsp_som1-soc.h B/include/configs/sundancedsp_som1-soc.h
--- A/include/configs/sundancedsp_som1-soc.h	1969-12-31 16:00:00.000000000 -0800
+++ B/include/configs/sundancedsp_som1-soc.h	2023-11-29 07:52:22.679218494 -0800
@@ -0,0 +1,126 @@
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <linux/sizes.h>
+
+#define CFG_SYS_SDRAM_BASE       0x80000000
+
+/* Environment options */
+
+#if defined(CONFIG_CMD_DHCP)
+#define BOOT_TARGET_DEVICES_DHCP(func)	func(DHCP, dhcp, na)
+#else
+#define BOOT_TARGET_DEVICES_DHCP(func)
+#endif
+
+#if defined(CONFIG_CMD_MTD)
+# define BOOT_TARGET_DEVICES_QSPI(func) func(QSPI, qspi, na)
+#else
+# define BOOT_TARGET_DEVICES_QSPI(func)
+#endif
+
+#if defined(CONFIG_CMD_MMC)
+#define BOOT_TARGET_DEVICES_MMC(func)	func(MMC, mmc, 0)
+#else
+#define BOOT_TARGET_DEVICES_MMC(func)
+#endif
+
+#if defined(CONFIG_MPFS_PRIORITISE_QSPI_BOOT)
+#define BOOTENV_DEV_QSPI(devtypeu, devtypel, instance) \
+	"bootcmd_qspi=echo Trying to boot from QSPI...; "\
+			"setenv scriptname boot.scr.uimg; " \
+			"if mtd list; then setenv mtd_present true; " \
+			"mtd read env ${scriptaddr} 0; " \
+			"source ${scriptaddr}; setenv mtd_present; " \
+			"fi\0 "
+
+#define BOOTENV_DEV_NAME_QSPI(devtypeu, devtypel, instance) \
+	"qspi "
+#else
+#define BOOTENV_DEV_QSPI(devtypeu, devtypel, instance) \
+	""
+
+#define BOOTENV_DEV_NAME_QSPI(devtypeu, devtypel, instance) \
+	""
+#endif
+
+#define BOOT_TARGET_DEVICES(func) \
+	BOOT_TARGET_DEVICES_QSPI(func)\
+	BOOT_TARGET_DEVICES_MMC(func)\
+	BOOT_TARGET_DEVICES_DHCP(func)
+
+#define BOOTENV_DESIGN_OVERLAYS \
+	"design_overlays=" \
+	"if test -n ${no_of_overlays}; then " \
+		"setenv inc 1; " \
+		"setenv idx 0; " \
+		"fdt resize ${dtbo_size}; " \
+		"while test $idx -ne ${no_of_overlays}; do " \
+			"setenv dtbo_name dtbo_image${idx}; " \
+			"setenv fdt_cmd \"fdt apply $\"$dtbo_name; " \
+			"run fdt_cmd; " \
+			"setexpr idx $inc + $idx; " \
+		"done; " \
+	"fi;\0 " \
+
+#if defined(CONFIG_FIT_SIGNATURE)
+#define BOOTENV\
+	"fdt_high=0xffffffffffffffff;\0 initrd_high=0xffffffffffffffff;\0" \
+	"bootcmd=if mtd list; then echo Trying to boot from QSPI...;" \
+	"ubi part rootfs; ubifsmount ubi0:rootfs; ubifsload 0x80000000 boot/fitImage;" \
+	"ubifsumount; ubi detach; " \
+	"run setbootargs;" \
+	"cp 0x80000000 ${scriptaddr} ${filesize};" \
+	"bootm start ${scriptaddr}#conf-microchip_mpfs-icicle-kit.dtb#${dtbo_conf};" \
+	"bootm loados; bootm prep; " \
+	"fdt set /soc/ethernet@20112000 mac-address ${icicle_mac_addr0}; " \
+	"fdt set /soc/ethernet@20110000 mac-address ${icicle_mac_addr1}; " \
+	"bootm go; " \
+	"reset; else " \
+	"setenv devnum 0; setenv mmcbootpart 1;"\
+	"if mmc rescan; then " \
+	"load mmc 0:${mmcbootpart} ${scriptaddr} fitImage; " \
+	"bootm start ${scriptaddr}; " \
+	"bootm loados ${scriptaddr}; " \
+	"bootm ramdisk; " \
+	"bootm prep; " \
+	"fdt set /soc/ethernet@20112000 mac-address ${icicle_mac_addr0}; " \
+	"fdt set /soc/ethernet@20110000 mac-address ${icicle_mac_addr1}; " \
+	"run design_overlays;" \
+	"bootm go; " \
+	"reset; " \
+	"fi; fi\0 "
+
+#undef CONFIG_BOOTCOMMAND
+#define CONFIG_BOOTCOMMAND\
+	"run bootcmd;reset;" \
+
+#if defined(CONFIG_MTD_SPI_NAND)
+#define BOOTARGS\
+	"qspibootargs=uio_pdrv_genirq.of_id=generic-uio ubi.mtd=2 root=ubi0:rootfs rootfstype=ubifs rootwait rw\0 " \
+	"setbootargs=setenv bootargs ${qspibootargs} mtdparts=spi2.0:2m(payload),128k(env),119m(rootfs)\0 " \
+	"dtbo_conf=conf-mpfs_icicle_flash5_click.dtbo\0 "
+#else
+#define BOOTARGS\
+	"qspibootargs=uio_pdrv_genirq.of_id=generic-uio ubi.mtd=2 root=ubi0:rootfs rootfstype=ubifs rootwait rw\0 " \
+	"setbootargs=setenv bootargs ${qspibootargs} mtdparts=spi2.0:2m(payload),128k(env),28m(rootfs)\0 " \
+	"dtbo_conf=conf-mpfs_icicle_pmod_sf3.dtbo \0"
+#endif
+
+#define CFG_EXTRA_ENV_SETTINGS \
+	"bootm_size=0x10000000\0" \
+	"scriptaddr=0x8e000000\0" \
+	BOOTENV_DESIGN_OVERLAYS \
+	BOOTARGS \
+	BOOTENV
+#else
+#include <config_distro_bootcmd.h>
+
+#define CFG_EXTRA_ENV_SETTINGS \
+	"bootm_size=0x10000000\0" \
+	"scriptaddr=0x8e000000\0" \
+	BOOTENV_DESIGN_OVERLAYS \
+	BOOTENV \
+
+#endif
+#endif /* __CONFIG_H */
